/* This program was automatically generated by vissim_interaction.rb on 19-06-2008 */
PROGRAM DOGS_MASTER ; /*  */

CONST 
        BASE_CYCLE_TIME = 80,
        DN = 3,
        DS = 14,
        SMOOTHING_FACTOR = 0.5,
        ENABLE_CNT = 20,
        DISABLE_CNT = 17,
        ENABLE_OCC = 11,
        DISABLE_OCC = 8,
        DOGS_FORCE_DISABLE = 0;
  
/* Expressions */
    cycle_sec := T;
    cycle_sec_plus1 := cycle_sec + 1;
    CURRENT_CYCLE_TIME := BASE_CYCLE_TIME + 10 * DOGS_LEVEL;
  
S000: IF NOT cycle_sec THEN /* Perform initialization */
S001:   DN_CNT := 0; DS_CNT := 0; CYCLES_AT_LEVEL:= 0; /* Keeps Vissim from nagging */
S002:   SetT(1); /* Start the clock */
        GOTO PROG_ENDE
      END;
S003: Marker_put(1,DOGS_LEVEL); Marker_put(2,cycle_sec);
S004: IF cycle_sec < CURRENT_CYCLE_TIME THEN
S005:    SetT(cycle_sec_plus1);
      ELSE
S006:    SetT(1);
S007:    PREV_CYCLES_AT_LEVEL := CYCLES_AT_LEVEL;
S008:    CYCLES_AT_LEVEL := PREV_CYCLES_AT_LEVEL + 1;
      END;
S009: IF T <> 1 THEN
S010:    GOTO PROG_ENDE;
      ELSE /* read and clear detectors every cycle */
/* When DOGS_LEVEL > 0 the counting period is extended along with the green time 
                  and the counts from the detections must be corrected before comparing to the cnt threshold values */
S011:    DOGS_CORRECTION_FACTOR := BASE_CYCLE_TIME / CURRENT_CYCLE_TIME;
S012:    DN_CNT := DOGS_CORRECTION_FACTOR * (DN_CNT + SMOOTHING_FACTOR * (Rear_ends(DN) - DN_CNT)); 
S013:    DS_CNT := DOGS_CORRECTION_FACTOR * (DS_CNT + SMOOTHING_FACTOR * (Rear_ends(DS) - DS_CNT));
S014:    DN_OCC := Occup_rate(DN) * 100; /* Occupied rate percentage */
S015:    DS_OCC := Occup_rate(DS) * 100;
/* Measuring on detectors, which are used to determine current dogs level */
S016:    D3_OCC := Occup_rate(3) * 100;
S017:    D14_OCC := Occup_rate(14) * 100;
S018:    D3_CNT := Rear_ends(3);
S019:    cre(3);
S020:    D4_CNT := Rear_ends(4);
S021:    cre(4);
S022:    D13_CNT := Rear_ends(13);
S023:    cre(13);
S024:    D14_CNT := Rear_ends(14);
S025:    cre(14);
S026:    IF (CYCLES_AT_LEVEL >= 2) THEN
S027:       CYCLES_AT_LEVEL := 0; /* allow fall through to dogs level change */
         ELSE
            GOTO ADJUST_LEVEL; /* make sure the new level is fully implemented */
         END;
      END;
/* Enable dogs if north or south bounds are reached. If dogs is enabled but we are below enable-bounds, keep dogs enabled until the lower threshold is reached */
S028: DOGS_ENABLED := ((DN_CNT >= ENABLE_CNT) OR (DS_CNT >= ENABLE_CNT) AND (DN_OCC >= ENABLE_OCC) OR (DS_OCC >= ENABLE_OCC)) OR DOGS_ENABLED AND ((DN_CNT > DISABLE_CNT) OR (DS_CNT > DISABLE_CNT) AND (DN_OCC > DISABLE_OCC) OR (DS_OCC > DISABLE_OCC));
S029: IF DOGS_FORCE_DISABLE OR NOT DOGS_ENABLED THEN
S030:    DOGS_LEVEL := 0;
      ELSE
S031:   IF DOGS_LEVEL = 0 THEN
S032:      IF (D3_OCC > 11) OR (D14_OCC > 11) OR (D3_CNT > 20) OR (D4_CNT > 20) OR (D13_CNT > 20) OR (D14_CNT > 20) THEN
S033:          NEW_DOGS_LEVEL := 1;
           END;
        END;
S034:   IF DOGS_LEVEL = 1 THEN
S035:      IF (D3_OCC > 29) OR (D14_OCC > 29) OR (D3_CNT > 33) OR (D4_CNT > 33) OR (D13_CNT > 33) OR (D14_CNT > 33) THEN
S036:          NEW_DOGS_LEVEL := 2;
           END;
S037:      IF (D3_OCC < 17) AND (D14_OCC < 17) AND (D3_CNT < 28) AND (D4_CNT < 28) AND (D13_CNT < 28) AND (D14_CNT < 28) THEN
S038:          NEW_DOGS_LEVEL := 0;
           END;
        END;
S039:   IF DOGS_LEVEL = 2 THEN
S040:      IF (D3_OCC > 45) OR (D14_OCC > 45) OR (D3_CNT > 46) OR (D4_CNT > 46) OR (D13_CNT > 46) OR (D14_CNT > 46) THEN
S041:          NEW_DOGS_LEVEL := 3;
           END;
S042:      IF (D3_OCC < 35) AND (D14_OCC < 35) AND (D3_CNT < 39) AND (D4_CNT < 39) AND (D13_CNT < 39) AND (D14_CNT < 39) THEN
S043:          NEW_DOGS_LEVEL := 1;
           END;
        END;
S044:   IF DOGS_LEVEL = 3 THEN
S045:      IF (D3_OCC > 58) OR (D14_OCC > 58) OR (D3_CNT > 59) OR (D4_CNT > 59) OR (D13_CNT > 59) OR (D14_CNT > 59) THEN
S046:          NEW_DOGS_LEVEL := 4;
           END;
S047:      IF (D3_OCC < 51) AND (D14_OCC < 51) AND (D3_CNT < 50) AND (D4_CNT < 50) AND (D13_CNT < 50) AND (D14_CNT < 50) THEN
S048:          NEW_DOGS_LEVEL := 2;
           END;
        END;
S049:   IF DOGS_LEVEL = 4 THEN
S050:      IF (D3_OCC > 70) OR (D14_OCC > 70) OR (D3_CNT > 72) OR (D4_CNT > 72) OR (D13_CNT > 72) OR (D14_CNT > 72) THEN
S051:          NEW_DOGS_LEVEL := 5;
           END;
S052:      IF (D3_OCC < 65) AND (D14_OCC < 65) AND (D3_CNT < 61) AND (D4_CNT < 61) AND (D13_CNT < 61) AND (D14_CNT < 61) THEN
S053:          NEW_DOGS_LEVEL := 3;
           END;
        END;
S054:   IF DOGS_LEVEL = 5 THEN
S055:      IF (D3_OCC > 80) OR (D14_OCC > 80) OR (D3_CNT > 85) OR (D4_CNT > 85) OR (D13_CNT > 85) OR (D14_CNT > 85) THEN
S056:          NEW_DOGS_LEVEL := 6;
           END;
S057:      IF (D3_OCC < 74) AND (D14_OCC < 74) AND (D3_CNT < 72) AND (D4_CNT < 72) AND (D13_CNT < 72) AND (D14_CNT < 72) THEN
S058:          NEW_DOGS_LEVEL := 4;
           END;
        END;
S059:   IF DOGS_LEVEL = 6 THEN
S060:      IF (D3_OCC > 92) OR (D14_OCC > 92) OR (D3_CNT > 98) OR (D4_CNT > 98) OR (D13_CNT > 98) OR (D14_CNT > 98) THEN
S061:          NEW_DOGS_LEVEL := 7;
           END;
S062:      IF (D3_OCC < 86) AND (D14_OCC < 86) AND (D3_CNT < 83) AND (D4_CNT < 83) AND (D13_CNT < 83) AND (D14_CNT < 83) THEN
S063:          NEW_DOGS_LEVEL := 5;
           END;
        END;
S064:   IF DOGS_LEVEL = 7 THEN
S065:      IF (D3_OCC > 96) OR (D14_OCC > 96) OR (D3_CNT > 111) OR (D4_CNT > 111) OR (D13_CNT > 111) OR (D14_CNT > 111) THEN
S066:          NEW_DOGS_LEVEL := 8;
           END;
S067:      IF (D3_OCC < 94) AND (D14_OCC < 94) AND (D3_CNT < 94) AND (D4_CNT < 94) AND (D13_CNT < 94) AND (D14_CNT < 94) THEN
S068:          NEW_DOGS_LEVEL := 6;
           END;
        END;
      END;
/*|NEW_DOGS_LEVEL - DOGS_LEVEL| = 0 or 1 */
ADJUST_LEVEL: IF DOGS_LEVEL <> NEW_DOGS_LEVEL THEN /* DOGS level changes are implemented by increments of +- 5 seconds per cycle */
S069:    IF DOGS_LEVEL < NEW_DOGS_LEVEL THEN
S070:       DOGS_LEVEL_STEP := DOGS_LEVEL + 0.5;
         ELSE
S071:       DOGS_LEVEL_STEP := DOGS_LEVEL - 0.5;
         END;
S072:    DOGS_LEVEL := DOGS_LEVEL_STEP;
      END
PROG_ENDE:    .